#include <ESP8266WiFi.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>

const int RED_PIN = 5;
const int GREEN_PIN = 4;
const int BLUE_PIN = 0;

const char* ssid = "BHADRINATHAN";
const char* password = "83000551055";
WebSocketsServer webSocket = WebSocketsServer(80);

void setup() {
  Serial.begin(115200);
  pinMode(RED_PIN, OUTPUT);
  pinMode(GREEN_PIN, OUTPUT);
  pinMode(BLUE_PIN, OUTPUT);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.print("Connected to WiFi. IP address: ");
  Serial.println(WiFi.localIP());
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
}

void loop() {
  webSocket.loop();
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
  DynamicJsonDocument doc(1024);
  DeserializationError error = deserializeJson(doc, (char*)payload);
  int redValue, greenValue, blueValue;

  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("Client disconnected");
      break;
    case WStype_CONNECTED:
      Serial.println("Client connected");
      break;
    case WStype_TEXT:
      Serial.print("Received text: ");
      Serial.println((char*)payload);
if (error) {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        break;
      }
      // Extract values from JSON message and control RGB LED
      if (doc.is<JsonArray>()) {
        JsonArray arr = doc.as<JsonArray>();
        if (arr.size() == 3) {
          int redValue = arr[0];
          int greenValue = arr[1];
          int blueValue = arr[2];
          analogWrite(RED_PIN, redValue);
          analogWrite(GREEN_PIN, greenValue);
          analogWrite(BLUE_PIN, blueValue);
          Serial.print("RGB LED values set to (");
          Serial.print(redValue);
          Serial.print(",");
          Serial.print(greenValue);
          Serial.print(",");
          Serial.print(blueValue);
          Serial.println(")");
        } else {
          Serial.println("Invalid array size");
        }
      } else {
        Serial.println("Invalid JSON input");
      }
      break;
    default:
      break;
  }
}
